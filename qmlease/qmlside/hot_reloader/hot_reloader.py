from os.path import splitdrive

from lk_utils import fs

from ...qtcore import QObject
from ...qtcore import bind_signal
from ...qtcore import slot

if __name__ == '__main__':
    from ...application import Application


class HotReloader(QObject):
    
    def __init__(
        self,
        app: 'Application',
        target_file: str,
        title: str = 'QmlEase Reloader',
    ) -> None:
        """
        params:
            reload_scheme: 'default' or 'clear_cache'
                see its only usage in `def reload`.
        """
        super().__init__(None)
        self.title = title
        self._app = app
        self._reload_count = 0
        self._target_file = fs.abspath(target_file)
    
    @slot(object)
    def init_reloader_window(self, window: QObject) -> None:
        window['title'] = self.title
        window['width'] = 840
        window['height'] = 960
        window['source'] = 'file:///' + self._target_file
        
        @bind_signal(window.reloadTriggered)
        def _() -> None:
            # A. use "magic count" to update url but not change the source path.
            # sys.modules.clear()
            self._reload_count += 1
            window['source'] = 'file:///{}?_reload_count={}'.format(
                self._target_file, self._reload_count
            )
            # B. clear component cache to force reload.
            # window['source'] = ''
            # self._app.engine.clearComponentCache()
            # window['source'] = self._target_file
    
    def run(self) -> None:
        self._app.register(self, 'reloader', 'qmlease')
        #   we can use this in qml with "py.qmlease.reloader.<method>(...)".
        # noinspection PyProtectedMember
        self._app._run(self._get_bootloader_file(self._target_file))
    
    @staticmethod
    def _get_bootloader_file(target_file: str) -> str:
        """
        we must put reloader_file and target_file in the same hard drive. -
        otherwise all relative imports in qml side will be crashed.
        """
        reloader_file = fs.xpath('_view2.qml')
        
        if splitdrive(reloader_file)[0] == splitdrive(target_file)[0]:
            # note: check if reloader_file and target_file in the same disk -
            # drive. for windows it may be True or False; for unix it always -
            # True ('' == '').
            return reloader_file
        
        new_dir = f'{fs.parent(target_file)}/__qmlease__'
        file0, file1 = reloader_file, f'{new_dir}/view.qml'
        print(
            ':v6', 
            'copy reloader file to another drive which should be same as '
            'target file.',
            '{} -> {}'.format(file0, file1)
        )
        if not fs.exist(new_dir):
            fs.make_dir(new_dir)
            fs.dump(
                'Generated by [qmlease](https://github.com/likianta/qmlease): '
                '`/qmlease/qmlside/hot_reloader/hot_reloader.py : '
                'class HotReloader : def _get_bootloader_file`.',
                f'{new_dir}/README.md'
            )
        fs.copy_file(file0, file1)
        return file1
